generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
  extensions = [uuidOssp(map:"uuid-ossp")]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model combo {
  id        Int         @id(map: "t_combo_pk") @default(autoincrement()) @map("combo_id")
  comboName String      @db.VarChar(50) @map("combo_name")
  isOption  Boolean     @map("isOption")

  items     comboItem[]
  indicators  indicator[]
  @@map("t_combo")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comboItem {
  id          Int       @id(map: "t_combo_items_pk") @default(autoincrement()) @map("item_id")
  comboId     Int       @map("combo_id")
  name        String    @db.VarChar(50) @map("item_name")
  isAbnormal  Boolean   @map("is_abnormal")
  serialNo    Int       @map("serial_no")
  combo       combo     @relation(fields: [comboId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("t_combo_items")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model indicator {
  id                  Int         @id(map: "t_detection_indicators_pk") @default(autoincrement()) @map("indicator_id")
  name                String      @db.VarChar(50) @map("indicator_name")
  description         String      @map("indicator_des") @default("")
  serialNo            Int         @map("serial_no")
  noDetection         Boolean     @map("no_detection")
  categoryId          Int         @map("category_id")
  type                String      @db.VarChar(10)
  hasSuggestionText   Boolean     @map("has_suggestion_text")
  thresholdLow        Decimal?    @db.Decimal(11, 2) @map("threshold_low")
  thresholdHigh       Decimal?    @db.Decimal(11, 2) @map("threshold_high")
  unit                String      @db.VarChar(10)
  suggestionText      String?     @map("suggestion_text")
  comboId             Int?        @map("combo_id")

  category            category    @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  combo               combo?      @relation(fields: [comboId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  detectResults       detectResult[]
  @@map("t_detection_indicators")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model detectResult {
  noriId            String    @db.Uuid @map("nori_id")
  indicatorId       Int       @map("indicator_id")
  stringData        String?   @db.VarChar(50) @map("data_string")
  numData           Decimal?  @db.Decimal(11, 2) @map("data_num")
  result            String    @db.VarChar(1) @map("detection_result")
  binData           Bytes?    @map("data_pic")
  boolData          Boolean?  @map("data_bool")
  suggestionText    String?   @map("suggestion_text")
  inspectorId       String?   @db.Uuid @map("user_id")
  createDate        DateTime? @db.Date @map("create_date")
  comboItemData     Int?      @map("data_item")
  inspectDate       DateTime? @db.Date @map("detection_date")

  nori              nori          @relation(fields: [noriId], references: [id], onDelete: NoAction, onUpdate: NoAction) 
  indicator         indicator     @relation(fields: [indicatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inspector         user?         @relation(fields: [inspectorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([noriId, indicatorId], map: "t_nori_detection_pk")
  @@map("t_nori_detection")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model nori {
  id              String    @id(map: "t_nori_info_pk") @default(dbgenerated("uuid_generate_v4()")) @map("nori_id") @db.Uuid
  vendor          String    @db.VarChar(50)
  exhibitionDate  DateTime  @map("exhibition_date") @db.Date
  exhibitionId    String    @map("exhibition_id") @db.VarChar(20)
  productionDate  DateTime? @map("production_date") @db.Date
  maritime        String?   @db.VarChar(20)
  boxQuantity     Int?      @map("box_quantity")
  batchNo         String    @db.VarChar(20) @map("batch_no")
  creatorId       String    @db.Uuid @map("user_id")
  createDate      DateTime  @db.Date @map("create_date")
  startDate       DateTime? @db.Date @map("detection_date")
  finishDate      DateTime? @db.Date @map("complete_date")
  level           String?   @db.VarChar(10)
  summary         String?   

  creator         user      @relation(fields: [creatorId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  detections      detectResult[]
  categories      detectCategory[]

  @@unique([vendor, exhibitionDate, exhibitionId], map: "t_nori_info_unique")
  @@map("t_nori_info")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model category {
  id            Int         @id(map: "t_detection_catgory_pk") @default(autoincrement()) @map("category_id")
  name          String      @db.VarChar(50) @map("category_name")
  serialNo      Int         @map("serial_no")
  invisible     Boolean    
  description   String
  hasPic        Boolean     @map("has_pic") @default(false)

  indicators    indicator[]
  detections    detectCategory[]

  @@map("t_detection_category")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model detectCategory {
  noriId        String   @db.Uuid @map("nori_id")
  categoryId    Int      @map("category_id")
  noDetection   Boolean
  picture       Bytes?   @map("picture_data")
  fileName      String?  @map("file_name") @db.VarChar(50)
  mimetype      String?  @db.VarChar(50)


  nori          nori      @relation(fields: [noriId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category      category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([noriId, categoryId], map: "t_nori_category_pk")
  @@map("t_nori_category")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  id        String  @id(map: "users_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid @map("user_id")
  username  String  @unique(map: "users_unique") @db.VarChar(20) @map("user_name")
  name      String  @db.VarChar(50)
  email     String  @db.VarChar(100)
  password  String

  detectResults   detectResult[]
  createNoris     nori[]

  @@map("t_users")
}
